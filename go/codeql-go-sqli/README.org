* SQL injection example
  This repository contains a trivial Go program to serve as introduction to
  CodeQL.  The focus is on treating the Go program as /data/ to be examined via
  CodeQL, so it's kept as simple as possible.

** Setup and sample run
   With Go installed, install prerequisites via 
   : make init
   
   Then try the following sequence to see the problem:
   
   #+BEGIN_SRC sh
     # Build
     ./build.sh

     # Prepare db
     ./admin -r
     ./admin -c
     ./admin -s 

     # Add regular user interactively
     ./add-user 2>> users.log
     First User

     
     # Regular user via "external" process
     echo "User Outside" | ./add-user 2>> users.log

     # Check
     ./admin -s

     # Add Johnny Droptable 
     ./add-user 2>> users.log
     Johnny'); DROP TABLE users; --

     # And the problem:
     ./admin -s

     # Check the log
     tail users.log
   #+END_SRC

** Identify the problem
   =./add-user= is reading from =STDIN=, and writing to a database; looking at the code in
   [[./add-user.go]] leads to
   : count, err := os.Stdin.Read(buf)
   for the read and 
   : _, err = db.Exec(query)
   for the write.

   This problem is thus a dataflow problem; in codeql terminology we have
   - a /source/ at the =os.Stdin.Read(buf)=
   - a /sink/ at the =db.Exec(query)=

   We write codeql to identify these two, and then connect them via
   a  /taintflow configuration/, the general form of a /dataflow configuration/.
   
** Build codeql database
   To get started, build the codeql database (adjust paths to your setup):
   #+BEGIN_SRC sh
     # Choose consistent codeql and ql library versions
     ~/local/vmsync/codeql263/codeql --version
     : CodeQL command-line toolchain release 2.6.3.

     cd ~/local/vmsync/codeql-go
     git checkout codeql-cli/v2.6.3

     # Build the db with source commit id.
     export PATH=$HOME/local/vmsync/codeql263:"$PATH"
     SRCDIR=$HOME/local/codeql-training-material/go/codeql-go-sqli
     DB=$SRCDIR/go-sqli-$(cd $SRCDIR && git rev-parse --short HEAD)

     echo $DB
     test -d "$DB" && rm -fR "$DB"
     mkdir -p "$DB"

     cd $SRCDIR && codeql database create --language=go -s . -j 8 -v $DB
   #+END_SRC

   Then add this database directory to your VS Code =DATABASES= tab.

** Develop the query bottom-up
   1. Identify the /source/ part of the 
      : count, err := os.Stdin.Read(buf)
      expression, the =buf= argument.  
      Start from a =from..where..select=, then convert to a predicate.

   2. Identify the /sink/ part of the
      : _, err = db.Exec(query)
      expression, the =query= argument.  Again start from =from..where..select=,
      then convert to a predicate.

   3. Fill in the /taintflow configuration/ boilerplate
      #+BEGIN_SRC java
        class SqliFlowConfig extends TaintTracking::Configuration {
            SqliFlowConfig() { this = "SqliFlowConfig" }

            override predicate isSource(DataFlow::Node node) {
                none()
                    }

            override predicate isSink(DataFlow::Node node) {
                none()
                    }
        }
      #+END_SRC

      Note that an inout-argument in Go (the =buf= slice is passed to =read=
      and points to updated data after the return) is accessed as a codeql source
      via
      : source.(DataFlow::PostUpdateNode).getPreUpdateNode().asExpr()
      instead of the usual
      : source.asExpr()

   The final query is
   #+BEGIN_SRC java
     /**
      ,* @name SQLI Vulnerability
      ,* @description Using untrusted strings in a sql query allows sql injection attacks.
      ,* @kind path-problem
      ,* @id go/SQLIVulnerable
      ,* @problem.severity error
      ,*/

     import go
     import semmle.go.dataflow.DataFlow
     import DataFlow::PathGraph

     class SqliFlowConfig extends TaintTracking::Configuration {
         SqliFlowConfig() { this = "SqliFlow" }

         override predicate isSource(DataFlow::Node source) {
             // count, err := os.Stdin.Read(buf)
             exists(CallExpr read |
                 read.getTarget().getName() = "Read" and
                 read.getArgument(0) = source.(DataFlow::PostUpdateNode).getPreUpdateNode().asExpr()
             )
         }

         override predicate isSanitizer(DataFlow::Node sanitizer) { none() }

         override predicate isAdditionalTaintStep(DataFlow::Node into, DataFlow::Node out) { none() }

         override predicate isSink(DataFlow::Node sink) {
             // _, err = db.Exec(query)
             exists(CallExpr exec |
                 exec.getTarget().getName() = "Exec" and
                 exec.getArgument(0) = sink.asExpr()
             )
         }
     }

     from SqliFlowConfig conf, DataFlow::PathNode source, DataFlow::PathNode sink
     where conf.hasFlowPath(source, sink)
     select sink, source, sink, "Possible SQL injection"
   #+END_SRC

** Optional: sarif file review of the results
   Query results are available in several output formats using the cli.  The
   following produces the sarif format, a json-based result description.

   #+BEGIN_SRC sh
     # The setup information from before
     export PATH=$HOME/local/vmsync/codeql263:"$PATH"
     SRCDIR=$HOME/local/codeql-training-material/go/codeql-go-sqli
     DB=$SRCDIR/go-sqli-$(cd $SRCDIR && git rev-parse --short HEAD)

     # Check paths
     test -d "$DB" && echo "db: $DB"
     test -d "$SRCDIR" && echo "source: $SRCDIR"

     # To see the help
     codeql database analyze -h

     # Run a query
     codeql database analyze                         \
            -v                                       \
            --ram=14000                              \
            -j12                                     \
            --rerun                                  \
            --search-path ~/local/vmsync/codeql-go   \
            --format=sarif-latest                    \
            --output go-sqli.sarif                   \
            --                                       \
            $DB                                      \
            $SRCDIR/SqlInjection.ql

     # Examine the file in an editor
     edit go-sqli.sarif
   #+END_SRC

   An example of using the sarif data is in the the jq script [[./sarif-summary.jq]].
   When run against the sarif input via 
   #+BEGIN_SRC sh
     jq --raw-output --join-output  -f sarif-summary.jq < go-sqli.sarif > go-sqli.txt
   #+END_SRC
   it produces output in a form close to that of compiler error messages:
   #+BEGIN_SRC text
     query-id: message line 
         Path
            ...
         Path
            ...
   #+END_SRC
   
